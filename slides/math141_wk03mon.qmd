---
pagetitle: "Data Wrangling with dplyr"
editor: source
format: 
  revealjs:
    chalkboard: true
    incremental: true
    theme: [default, custom.scss]
    height: 900
    width: 1600
    slide-number: c
    auto-stretch: false
    callout-appearance: simple
    pdf-max-pages-per-slide: 2
    menu: 
      side: right
      numbers: true
execute:
  echo: true
  warning: false
  message: false
---

```{r}
#| include: false
#| warning: false
#| message: false

knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, 
                      fig.retina = 3, fig.align = 'center')
library(knitr)
library(tidyverse)
```

::::: columns
::: {.column .center width="60%"}
![](img/DAW.jpeg){width="90%"}
:::

::: {.column .center width="40%"}
<br>

[Data Wrangling with `dplyr`]{.custom-title}

<br> <br> 

[Grayson White]{.custom-subtitle}

[Math 141 <br> Week 2 \| Fall 2025]{.custom-subtitle}
:::
:::::

------------------------------------------------------------------------

## Agenda

------------------------------------------------------------------------

## Load Necessary Packages

![](img/dplyr.png){width="15%" fig-align="center"}

`dplyr` is part of this collection of data science packages.

```{r}
#| message: true
#| warning: true
# Load necessary packages
library(tidyverse)
```

------------------------------------------------------------------------





![](img/dplyr_wrangling.png){width="70%" fig-align="center"}

------------------------------------------------------------------------


## Data for today

```{r}
dogs <- read_csv("https://data.cambridgema.gov/api/views/sckh-3xyx/rows.csv")

# Useful wrangling that we will come back to
dogs_top5 <- dogs %>% 
  mutate(Breed = case_when(
                       Dog_Breed == "Mixed Breed" ~ "Mixed",
                       Dog_Breed != "Mixed Breed" ~ "Single")) %>%
  filter(Dog_Name %in% c("Luna", "Charlie", "Lucy", "Cooper", "Rosie" ))

```


------------------------------------------------------------------------

### Data Wrangling: Transformations done on the data

**Why wrangle the data?**

::::: columns
::: {.column .fragment width="50%"}
To **summarize** the data.
:::

::: {.column .fragment width="50%"}
→ To compute the mean and standard deviation of the bike counts.
:::
:::::

::::: columns
::: {.column .fragment width="50%"}
To **drop** missing values. (Need to be careful here!)
:::

::: {.column .fragment width="50%"}
→ On our P-Set 2, we are seeing that `ggplot2` will often drop observations before creating a graph.
:::
:::::

::::: columns
::: {.column .fragment width="50%"}
To **filter** to a particular subset of the data.
:::

::: {.column .fragment width="50%"}
→ To subset the bike counts data to 2 days in July of 2019.
:::
:::::

::::: columns
::: {.column .fragment width="50%"}
To **collapse** the categories of a categorical variable.
:::

::: {.column .fragment width="50%"}
→ To go from 86 dog breeds to just mixed or single breed.
:::
:::::

------------------------------------------------------------------------

### Data Wrangling: Transformations done on the data

**Why wrangle the data?**

::::: columns
::: {.column .fragment width="50%"}
To **arrange** the data to make it easier to display.
:::

::: {.column .fragment width="50%"}
→ To sort from most common dog name to least common.
:::
:::::

::::: columns
::: {.column .fragment width="50%"}
To fix how `R` **stores** a variable.
:::

::: {.column .fragment width="50%"}
→ For the bike data, I converted `Day` from a character variable/vector to a date variable/vector.
:::
:::::

::::: columns
::: {.column .fragment width="50%"}
→ To **join** data frames when information about your cases is stored in multiple places!
:::

::: {.column .fragment width="50%"}
Will see examples of this next class!
:::
:::::

------------------------------------------------------------------------

## dplyr for Data Wrangling

-   Six common wrangling verbs:
    -   `summarize()`
    -   `count()`\
    -   `mutate()`\
    -   `select()`
    -   `filter()`
    -   `arrange()`
-   One action:
    -   `group_by()`

------------------------------------------------------------------------

## Return to `mutate()`

::::: columns
::: {.column width="50%"}
Add new variables

```{r}
count(dogs_top5, Dog_Name, Breed) %>%
  group_by(Dog_Name) %>%
  mutate(prop = n/sum(n))
```
:::

::: {.column width="50%"}
Modify existing variables

```{r}
# class(july_2019$DateTime)
# july_2019 <- july_2019 %>%
#   mutate(DateTime = mdy_hms(DateTime))
# class(july_2019$DateTime)
```
:::
:::::

------------------------------------------------------------------------

## `select()`: Extract variables

```{r}
dogs %>%
  select(Dog_Name, Dog_Breed)
```

------------------------------------------------------------------------

## Motivation for `filter()`

```{r}
count(dogs, Dog_Name, sort = TRUE)
```

------------------------------------------------------------------------

## `filter()`: Extract cases

```{r}
dogs_top5 <- dogs %>% 
  filter(Dog_Name %in% c("Luna", "Charlie", "Lucy", "Cooper", "Rosie" ))

count(dogs_top5, Dog_Name, sort = TRUE)
```

------------------------------------------------------------------------

## `arrange()`: Sort the cases

::::: columns
::: {.column width="50%"}
```{r}
count(dogs_top5, Dog_Name) %>%
  arrange(n)

count(dogs_top5, Dog_Name) %>%
  arrange(desc(n))
```
:::

::: {.column .fragment width="50%"}
```{r}
count(dogs_top5, Dog_Name) %>%
  arrange(Dog_Name)
```
:::
:::::

------------------------------------------------------------------------


## New Data Setting: [Bureau of Labor Statistics (BLS) Consumer Expenditure Survey](https://www.bls.gov/cex/) {.smaller}

**BLS Mission**: "Measures labor market activity, working conditions, price changes, and productivity in the U.S. economy to support public and private decision making."

**Data**: Last quarter of the 2016 BLS Consumer Expenditure Survey.

```{r}
library(tidyverse)

ce_raw <- read_csv("data/fmli.csv", 
                 na = c("NA", "."))
glimpse(ce_raw)
```

------------------------------------------------------------------------

## Wrangling CE Data {.smaller}

::::::: columns
:::: {.column width="\"50%"}
Want to better understand a family's income and expenditures

```{r}
ce <- ce_raw %>%
  select(NEWID, PRINEARN, FINCBTAX,
         BLS_URBN, HIGH_EDU, TOTEXPCQ, IRAX)
dim(ce)
```

**Variables:**

::: nonincremental
-   `NEWID`: ID for the household
-   `PRINEARN`: ID for which member of the household is the principal earner
-   `FINCBTAX`: Final income before taxes for the year
:::
::::

:::: {.column width="\"50%"}
::: nonincremental
-   `BLS_URBN`: 1 = urban, 2 = rural
-   `HIGH_EDU`: Highest education in the household. 00 = Never attended, 10 = Grades 1-8, 11 = Grades 9-12, no degree, 12 = High school graduate, 13 = Some college, no degree, 14 = Associates degree, 15 = Bachelor's degree, 16 = Masters, Professional/doctorate degree
-   `TOTEXPCQ` = Total household expenditures for the current quarter
-   `IRAX` = Total in retirement funds
:::
::::
:::::::

------------------------------------------------------------------------

## Wrangling CE Data

```{r}
ce <- ce %>%
  mutate(YEARLY_EXP = TOTEXPCQ*4)
ce
```

------------------------------------------------------------------------

## Logical Operators

```{r}
ce_sub <- ce %>%
  filter(YEARLY_EXP > 0, BLS_URBN == 1, HIGH_EDU != "00")
ce_sub
```

------------------------------------------------------------------------

## Logical Operators

```{r}
ce_sub <- ce %>%
  filter(YEARLY_EXP > 0, (BLS_URBN == 1 | HIGH_EDU != "00"))
ce_sub
```

------------------------------------------------------------------------

## `case_when`: Recoding Variables

::::: columns
::: {.column width="\"50%"}
```{r}
count(ce, BLS_URBN)

```
:::

::: {.column .fragment width="\"50%"}
```{r}
ce <- ce %>%
  mutate(BLS_URBN = case_when(
    BLS_URBN == 1 ~ "Urban",
    BLS_URBN == 2 ~ "Rural"
  ))
count(ce, BLS_URBN)
```
:::
:::::

------------------------------------------------------------------------

## `case_when`: Creating Variables

::::: columns
::: {.column width="\"50%"}
```{r}
count(ce, HIGH_EDU)
ce <- ce %>%
  mutate(HIGH_EDU = as.numeric(HIGH_EDU))
count(ce, HIGH_EDU)
```
:::

::: {.column .fragment width="\"50%"}
```{r}
ce <- ce %>%
  mutate(HIGH_EDU2 = case_when(
    is.na(HIGH_EDU) ~ NA,
    HIGH_EDU <= 11 ~ "Less than high school degree",
    between(HIGH_EDU, 12, 13) ~ "High school degree",
    HIGH_EDU >= 14 ~ "College degree"
  ))
count(ce, HIGH_EDU2)
```
:::
:::::

------------------------------------------------------------------------

## Variable Names

Sometimes datasets come with terrible variable names.

```{r}
ce <- ce %>%
  rename(INCOME = FINCBTAX)
ce
```

------------------------------------------------------------------------

## Handling Missing Data

Want to compute mean income and mean retirement funds by location.

::::: columns
::: {.column width="\"50%"}
```{r}
ce %>%
  group_by(BLS_URBN) %>%
  summarize(mean_INCOME = mean(INCOME),
            mean_IRAX = mean(IRAX),
            households = n())
```
:::

::: {.column .fragment width="\"50%"}
```{r}
ce_aggressive <- ce_raw %>%
  na.omit()
ce_aggressive
```
:::
:::::

------------------------------------------------------------------------

## Handling Missing Data

::::: columns
::: {.column width="\"50%"}
```{r}
ce_moderate <- ce %>%
  drop_na(IRAX, INCOME, BLS_URBN) %>%
  group_by(BLS_URBN) %>%  
  summarize(mean_INCOME = mean(INCOME),
            mean_IRAX = mean(IRAX),
            households = n())

ce_moderate
```
:::

::: {.column .fragment width="\"50%"}
```{r}
ce_light <- ce %>%
  group_by(BLS_URBN) %>%
  summarize(mean_INCOME = mean(INCOME, na.rm = TRUE),
            mean_IRAX = mean(IRAX, na.rm = TRUE), 
            households = n())

ce_light
```
:::
:::::

------------------------------------------------------------------------

## Multiple Groupings

```{r}
ce %>%
  group_by(BLS_URBN, HIGH_EDU2) %>%
  summarize(mean_INCOME = mean(INCOME, na.rm = TRUE),
            mean_IRAX = mean(IRAX, na.rm = TRUE), 
            households = n()) %>%
  arrange(mean_IRAX)
```

------------------------------------------------------------------------

## Piping into `ggplot2`

```{r}
#| output-location: column
ce %>%
  group_by(BLS_URBN, HIGH_EDU2) %>%
  summarize(mean_INCOME = mean(INCOME, na.rm = TRUE),
            mean_IRAX = mean(IRAX, na.rm = TRUE), 
            households = n()) %>%
  ggplot(mapping = aes(x = mean_INCOME,
                       y = mean_IRAX, 
                       shape = BLS_URBN,
                       color = HIGH_EDU2)) +
  geom_point(size = 5) 
```

------------------------------------------------------------------------

## Naming Wrangled Data

When I make a new dataframe, what name should I give it? Importantly, should I **write over my original dataframe** or should I **save a new dataframe**?

-   *My* answer:
    -   Is your new dataframe structurally different? If so, give it a **new name**.
    -   Are you removing values you will need for a future analysis within the same document? If so, give it a **new name**.
    -   Are you just adding to or cleaning the data? If so, then **write over** the original.

------------------------------------------------------------------------

### Sage Advice from ModernDive

<br>

> "Crucial: Unless you are very confident in what you are doing, it is worthwhile not starting to code right away. Rather, first sketch out on paper all the necessary data wrangling steps not using exact code, but rather high-level pseudocode that is informal yet detailed enough to articulate what you are doing. This way you won't confuse what you are trying to do (the algorithm) with how you are going to do it (writing dplyr code)."

